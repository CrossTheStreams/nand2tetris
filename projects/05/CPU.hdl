// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    // C-Instruction Destinations
    And(a=cInstruction, b=instruction[5], out=ALUToA);
    And(a=cInstruction, b=instruction[4], out=loadD);
    And(a=cInstruction, b=instruction[3], out=writeM);  

    // Load A reg if A-Instruction or C-Instruction to A register
    Or(a=ALUToA, b=aInstruction, out=loadA);

    // Mux for A Register
    Mux16(
        a=instruction,
        b=ALUOutput,
        sel=ALUToA,
        out=ARegisterInput
    );

    // A Register
    ARegister(
        in=ARegisterInput,
        load=loadA,
        out=ARegisterOut
    );

    Or16(a=false, b=ARegisterOut, out[0..14]=addressM);

    // D Register
    DRegister(
        in=ALUOutput,
        load=loadD,
        out=DRegisterOut
    );

    // A/M Mux for ALU input
    Mux16(
        a=ARegisterOut,
        b=inM,
        sel=instruction[12],
        out=AOrM
    );

    ALU(
        x=DRegisterOut,
        y=AOrM,
        // Compare ALU boolean arithmetic in figure 2.6
        // with comp mneumonic table in figure 4.3
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUOutput,
        out=outM,
        zr=ALUZero,   // output is zero
        ng=ALULTZero  // output is less than zero
    );

    Or(a=ALUZero, b=ALULTZero, out=ALUZeroOrLess);
    Not(in=ALUZeroOrLess, out=ALUGTZero);

    And(a=instruction[0], b=ALUGTZero, out=jgt);
    And(a=instruction[1], b=ALUZero, out=jeq);
    And(a=instruction[2], b=ALULTZero, out=jlt);

    And(a=instruction[2], b=instruction[0], out=maybeNegateA);
    Not(in=instruction[1], out=maybeNegateB);
    And(a=maybeNegateA, b=maybeNegateB, out=yesNegate);
    Not(in=ALUZero, out=ALUNotZero);
    And(a=yesNegate, b=ALUNotZero, out=jne);

    
    Or(a=jgt, b=jeq, out=jge);
    Or(a=jge, b=jlt, out=maybeJumpA);
    Or(a=maybeJumpA, b=jne, out=maybeJumpB);
    And(a=maybeJumpB, b=cInstruction, out=yesLoad);

    Not(in=yesLoad, out=yesIncrement);

    PC(
        in=ARegisterOut,
        load=yesLoad,
        inc=yesIncrement,
        reset=reset,
        out[0..14]=pc
    );


}